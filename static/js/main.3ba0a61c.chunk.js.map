{"version":3,"sources":["components/CalcButton.js","components/ButtonList.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","props","wide","css","tall","CalcButton","id","value","updateDisplay","handleClick","onClick","ButtonList","clickableElem","map","elem","i","ButtonContainer","div","Display","reMath","reMultiple","App","useState","display","setDisplay","answer","setAnswer","lastPressed","setLastPressed","basicSet","undefined","className","test","slice","evaluate","length","replace","toString","lastTwo","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ba0a61c.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\n\nconst Button = styled.button`\n    position: relative;\n    background-color: transparent;\n    border: none;\n    outline: 1px solid palevioletred;\n    color: palevioletred;\n    height: 3.4rem;\n    width: 4rem;\n    padding: 0.25rem 1rem;\n    font-weight: bold;\n    cursor: pointer;\n\n    ${props => props.wide &&\n    css`\n        background: palevioletred;\n        color: white;\n        width: 8rem;\n    `}\n\n    ${props => props.tall &&\n    css`\n        position: absolute;\n        bottom: 0;\n        background: #333;\n        color: white;\n        height: 6.8rem;\n    `}\n`\n\nconst CalcButton = ({ id, value, updateDisplay }) => {\n    \n    const handleClick = () => {\n        updateDisplay(value);\n    }\n\n    return (\n        id === 'clear' || id === 'zero'\n        ? <Button onClick={handleClick} id={id} wide>{value}</Button>\n        : ( \n            id === 'equals'\n            ?  <Button onClick={handleClick} id={id} tall>{value}</Button>\n            :  <Button onClick={handleClick} id={id}>{value}</Button>\n          )\n    );\n}\n\nexport default CalcButton;","import CalcButton from './CalcButton';\n\nconst ButtonList = ({ clickableElem, updateDisplay }) => {\n\n    // Create buttons by mapping through array and passing\n    // props to CalcButton component which returns a JSX element\n    return (\n        clickableElem.map((elem, i) => {\n            return (\n                <CalcButton \n                    key={i}\n                    id={clickableElem[i].id}\n                    value={clickableElem[i].value}\n                    updateDisplay={updateDisplay}\n                />\n            );\n        })\n    );\n}\n\nexport default ButtonList;","import { useState } from 'react';\nimport './App.css';\nimport ReactFCCtest from 'react-fcctest';\nimport ButtonList from './components/ButtonList';\nimport styled from 'styled-components';\nimport { evaluate } from 'mathjs';\n\nconst ButtonContainer = styled.div`\n  border: solid 1px grey;\n  height: 17rem;\n  width: 100%;\n  position: relative;\n`\n\nconst Display = styled.div`\n  border: solid 1px #e75480;\n  padding: 0.5rem;\n  font-size: 1.4rem;\n  height: 3rem;\n  width: 94%;\n  display: flex;\n  align-items: flex-end;\n  justify-content: flex-end;\n`\n\n// Table with clickable elements as objects\nconst clickableElem = [\n  { id: 'clear', value: 'AC' },\n  { id: 'divide', value: '/' },\n  { id: 'multiply', value: 'x' },\n  { id: 'seven', value: '7' },\n  { id: 'eight', value: '8' },\n  { id: 'nine', value: '9' },\n  { id: 'subtract', value: '-' },\n  { id: 'four', value: '4' },\n  { id: 'five', value: '5' },\n  { id: 'six', value: '6' },\n  { id: 'add', value: '+' },\n  { id: 'one', value: '1' },\n  { id: 'two', value: '2' },\n  { id: 'three', value: '3' },\n  { id: 'zero', value: '0' },\n  { id: 'decimal', value: '.' },\n  { id: 'equals', value: '=' }\n]\n\n// Regex to search for math operators\nconst reMath = /[/|x|+|-]+/\nconst reMultiple = /[/|x|+|-]{2,}/\n\n\nconst App = () => {\n  const [display, setDisplay] = useState('0');\n  const [answer, setAnswer] = useState();\n  const [lastPressed, setLastPressed] = useState();\n\n  // Method to handle the display that receives the type of button as\n  // a prop\n  const handleDisplay = (button) => {\n    // If clear button is clicked\n    setLastPressed(button);\n    if (button === 'AC') {\n      setDisplay('0');\n      setAnswer('');\n    // If equal button is clicked\n    } else if (button === '=') {\n      if (reMath.test(answer.slice(-1))) {\n        setDisplay(evaluate(answer.slice(0, answer.length - 1  ).replace('x', '*')).toString());\n      } else { \n        setDisplay(evaluate(answer.replace('x', '*')).toString());\n      }\n    // If a math operator is clicked\n    } else if (reMath.test(button)) {\n      setDisplay(button);\n      // Handle cases for last button pressed and consecutive math operators pressed\n      let lastTwo = answer.slice(-2).toString();\n      if (answer !== undefined && lastPressed === '=') {\n        setAnswer(display + button);\n      } else if (answer !== undefined && !reMath.test(answer.slice(-1))) {\n        setAnswer(answer + button);\n      } else if (answer !== undefined && reMultiple.test(lastTwo)) {\n        setAnswer(answer.slice(0, answer.length - 2) + button);\n      } else if (answer !== undefined && button === '-') {\n        setAnswer(answer + button);\n      } else if (answer !== undefined && reMath.test(answer.slice(-1))) {\n        setAnswer(answer.slice(0, answer.length - 1) + button);\n      }\n    // If user clicks the decimal button and there are no other decimals in the display\n    } else if (display.indexOf('.') < 0 && button === '.') {\n      setDisplay(display + button);\n      basicSet(button);\n    // If the answer, zero, or a math operator is on the display \n    // and a non-zero digit is clicked\n    } else if (display === '0' || reMath.test(display) || display === 'fixThisCondit') {\n      setDisplay(button);\n      basicSet(button);\n    // If the display is not equal to 0, a math operator and button is not equal to decimal\n    } else if (display !== '0' && !reMath.test(display) && button !== '.') {\n      setDisplay(display + button);\n      basicSet(button);\n    }\n  }\n\n  const basicSet = (button) => {\n    if (answer === undefined) {\n      setAnswer(button);\n    } else {\n      setAnswer(answer + button);\n    }\n  }\n  \n  return (\n    <div className='App'>\n      <ReactFCCtest />\n      <Display id=\"display\">{display}</Display>\n      <ButtonContainer>\n        <ButtonList updateDisplay={handleDisplay} clickableElem={clickableElem} />\n      </ButtonContainer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}